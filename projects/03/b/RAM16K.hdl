// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    //(add[0..2]=register, add[3..5]=RAM8, add[6..8]=RAM64, add[9..11]=RAM4K)
    //add[12..13]=RAM4K chip

    //use DMUX to control which RAM4K chip to send load bit to (if set)
    DMux4Way (in=load, sel=address[12..13], a=ram0, b=ram1, c=ram2, d=ram3);

    //create array of RAM4K chips
    RAM4K (in=in, load=ram0, address=address[0..11], out=ram0out);
    RAM4K (in=in, load=ram1, address=address[0..11], out=ram1out);
    RAM4K (in=in, load=ram2, address=address[0..11], out=ram2out);
    RAM4K (in=in, load=ram3, address=address[0..11], out=ram3out);

    //use MUX to control which RAM4K chip to output
    Mux4Way16 (a=ram0out, b=ram1out, c=ram2out, d=ram3out, sel=address[12..13], out=out);
}
